@page "/"
@using Blazemoji.Services.Execution;
@inject ICompilerService _compilerService
@inject ICodeExecutionService _codeExecutionService
@inject ILibraryService _libraryService
@inject IDialogService _dialogService
@inject LocalStorageFiles _localStorageFiles

<MudContainer Style="max-height:90dvh;overflow:hidden;" MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudGrid Justify="Justify.Center" Spacing="1">
        <MudItem xs="3">
            <Sidebar @ref="_sidebar" OnEmojicFileSelected="@LoadEmojicFile" OnEmojicodeInsertedCallback="@InsertEmojicodeAsync" CopiedToClipboard="OnCopiedToClipboard" />
        </MudItem>
        <MudItem xs="6">
            <MudPaper Elevation="25" Class="mb-2">
                <MudToolBar>
                    <h4>🍇 Emojicode Editor</h4>
                    <MudSpacer />
                    <MudTooltip Text="Save Code">
                        <MudIconButton Icon="@Icons.Material.Outlined.Save" OnClick="SaveEmojicode" />
                    </MudTooltip>
                     <MudButton Variant="@Variant.Filled" StartIcon="@Icons.Material.Filled.PlayArrow" OnClick="RunEmojiCodeClicked" Disabled="_loading" Color="Color.Success">
                         @if(_loading){
                            <span class="mr-2">Running...</span>
                            <MudProgressCircular Indeterminate="true" Style="max-width:1rem;max-height:1rem;" Color="Color.Primary" />
                        }
                        else
                        {
                            <span>Run Code</span>
                        }

                     </MudButton>
                </MudToolBar>
            </MudPaper>
            <EmojiCodeEditor @ref="_editor" />
        </MudItem>
        <MudItem xs="3">
            <MudPaper Height="100%" Style="position:relative">
            <MudOverlay DarkBackground="true"  Absolute="true" Visible="_loading">
                @if(_loading)
                {                        
                    <MudProgressCircular Size="Size.Large" Indeterminate="true" Color="Color.Primary" />
                }
            </MudOverlay>
            <OutputPanel Output="@_output" />
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private EmojiCodeEditor _editor = default!;

    private string _output = "";
    private bool _loading = false;
    private Sidebar _sidebar;

    protected async Task RunEmojiCodeClicked()
    {
        string code = await _editor.GetCodeAsync();

        try
        {
            _loading = true;
            StateHasChanged();

            var compilerResult = _compilerService.CompileEmojicode(code);

            if(compilerResult.Error)
            {
                _output = compilerResult.Message;
                _loading = false;
                return;
            }

            _output = "";

            //RunCompiled Code
            var result = await _codeExecutionService.ProcessCodeAsync(compilerResult.Result);

            _output += "Run time: " + result.ExecutionTime.TotalSeconds + " seconds" + Environment.NewLine + Environment.NewLine + (result.Error ? result.Message + Environment.NewLine + Environment.NewLine : Environment.NewLine + Environment.NewLine) + result.Result;
        }
        catch(Exception ex)
        {
            _output = ex.Message;
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task OnCopiedToClipboard()
    {
        await _editor.Editor.Focus();
    }

    private async Task LoadEmojicFile(EmojicFile file)
    {
        await _editor.SetCodeAsync(file.Code);
    }

    private async Task SaveEmojicode()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogResponse = await _dialogService.ShowAsync<SaveFileDialog>("Save File As", options);
        var result = await dialogResponse.Result;
        if(result.Canceled)
        {
            return;
        }

        var code = await _editor.GetCodeAsync();
        var emojicode = new EmojicFile()
            {
                Name = result.Data.ToString() ?? "Untitled.🍇",
                Code = code,
            };

        await _libraryService.SaveFileToLocalStorageAsync(emojicode);

        var newFiles = await _libraryService.GetUserSavedFiles();

        _localStorageFiles.Files = newFiles.OrderBy(x => x.Name).ToList();
    }

    private async Task InsertEmojicodeAsync(EmojicodeKeyword emojicode)
    {
        var selection = await _editor.Editor.GetSelection();
        var operation = new IdentifiedSingleEditOperation()
            {
                Range = selection,
                ForceMoveMarkers = true,
                Text = emojicode.Emoji,
    };
        await _editor.Editor.ExecuteEdits("emojiEditor", new List<IdentifiedSingleEditOperation>() { operation }, new List<BlazorMonaco.Selection>() { selection });

        var position = await _editor.Editor.GetPosition();
        position.Column = position.Column + emojicode.Emoji.Length;

        await _editor.Editor.SetPosition(position, "emojiEditor");

        await _editor.Editor.Focus();
    }

}