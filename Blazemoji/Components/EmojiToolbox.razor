@using Blazemoji.Emojicode.Keywords;

<MudList Clickable="false" Style="overflow-x:clip;overflow-y:auto;max-height:84vh;">
    @if (_emojisByCategory != null)
    {
        @foreach (var category in _emojisByCategory.Keys)
        {
            <MudListItem><h6>@category
                </h6></MudListItem>
            <MudDivider />
            <MudGrid Spacing="1" Justify="Justify.FlexStart">
            @foreach (var keyword in _emojisByCategory[category])
            {
                    <MudItem xs="@_itemsPerRowFunc(_itemsPerRow)" xl="@_itemsPerRowFunc(_itemsPerRow-1)">
                        <Emoji CopiedToClipboard="CopiedToClipboard" EmojiInserted="EmojicodeInserted" Keyword="@keyword" />
                    </MudItem>
            }
            </MudGrid>
        }
    }
    else {
        <div>Loading...</div>
    }
</MudList>

@code {
    [Parameter]
    public EventCallback<EmojicodeKeyword>? OnEmojicodeSelected { get; set; }

    [Parameter]
    public EventCallback<EmojicodeKeyword> OnEmojicodeInserted { get; set; }

    [Parameter]
    public EventCallback CopiedToClipboard { get; set; }

    [Inject]
    public IEnumerable<EmojicodeKeyword> EmojicodeKeywords { get; set; } = default!;

    private const int _itemsPerRow = 4;
    private Func<int, int> _itemsPerRowFunc = (int i) => i;
    private Dictionary<string, List<EmojicodeKeyword>> _emojisByCategory = default!;

    protected override void OnInitialized()
    {
        _emojisByCategory = new Dictionary<string, List<EmojicodeKeyword>>
        {
            {
                EmojicodeCategory.Basics, new List<EmojicodeKeyword>
                {
                    EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.ChequeredFlag)),
                    EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.Grape)),
                    EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.Watermelon)),
                    EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.ThoughtBubble)),
                    EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.GrinningFace)),
                    EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.Exclamation)),
                    EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.Return)),
                    EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.CrossMark)),
                    EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.ArrowBlock)),
            }
        },
        {
            EmojicodeCategory.ClassesAndValueTypes, new List<EmojicodeKeyword>
            {
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.NumberLiteral)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.Letters)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.NewButton)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.ThumbsUp)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.ThumbsDown)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.Crayon)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.Magnet)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.PigNose)),
            }
        },
        {
            EmojicodeCategory.Operators, new List<EmojicodeKeyword>
            {
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.Plus)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.Minus)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.Multiplication)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.Division)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.Exponent)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.Remainder)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.FistRight)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.FistLeft)),
            }
        },
        {
            EmojicodeCategory.Equality, new List<EmojicodeKeyword>
            {
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.LessThan)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.GreaterThan)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.EqualTo)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.CrossMarkButton)),
            }
        },
        {
            EmojicodeCategory.Logic, new List<EmojicodeKeyword>
            {
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.If)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.Else)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.While)),
                EmojicodeKeywords.First(x => x.Emoji.Equals(Emojis.ForEach)),
            }
        }};
    }

    private async Task EmojicodeSelected(MouseEventArgs e, EmojicodeKeyword emoji)
    {
        await OnEmojicodeSelected?.InvokeAsync(emoji)!;
    }

    private async Task EmojicodeInserted(EmojicodeKeyword emoji)
    {
        await OnEmojicodeInserted.InvokeAsync(emoji);
    }
}