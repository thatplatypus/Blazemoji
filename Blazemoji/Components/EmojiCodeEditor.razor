@using BlazorMonaco.Editor
@using BlazorMonaco;
@inject IJSRuntime _jsRuntime

<BlazorMonaco.Editor.StandaloneCodeEditor @ref="_editor" 
    CssClass="editor" 
    Id="emojiEditor" 
    OnDidInit="InitEditor"
    OnDidBlurEditorText="SetPosition"
    ConstructionOptions="EditorConstructionOptions" />

@code {
    private StandaloneCodeEditor _editor = default!;
    private BlazorMonaco.Selection _selection = default!;

    [Parameter]
    public EventCallback EmojiPickerOpened { get; set; }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {

        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = false,
            Language = "emojiscript",
            Value = "🏁 🍇\n" +
                    "\t😀 🔤Hello World!🔤❗️\n" +
                    "🍉",
            UnicodeHighlight = new UnicodeHighlightOptions{
                InvisibleCharacters = false,
                AmbiguousCharacters = false,
            },
        }; 
    }

    public StandaloneCodeEditor Editor
    {
        get
        {
            return _editor;
        }
    }

    private async Task InitEditor()
    {
        foreach(var keybinding in EmojicodeKeybindings.Keybindings)
        {
            await AddCommand(keybinding.Key, keybinding.Value);
        }

        await _editor.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.KeyE, async (args) =>
        {
            await EmojiPickerOpened.InvokeAsync();
        });

        await SetMonarchsTokenProviderAsync();
    }

    private async Task SetMonarchsTokenProviderAsync()
    {
        await _jsRuntime.InvokeVoidAsync("monaco.languages.register", new { id = "emojiscript" });

        await _jsRuntime.InvokeVoidAsync("monaco.languages.setMonarchTokensProvider", "emojiscript", new
        {
            tokenizer = new
            {
                root = new object[]
                {
                    new object[] { @"🔤", "string", "@string" },
                    new object[] { @"💭🔜", "comment", "@comment" },
                    new object[] { @"💭.*", "comment" },
                },
                @string = new object[]
                {
                    new object[] { @"🧲.*🧲", "variable" },
                    new object[] { @"🔤", "string", "@pop" },
                    new object[] { @".", "string" },
                },
                comment = new object[]
                {
                    new object[] { @"🔚💭", "comment", "@pop" },
                    new object[] { @".", "comment" },
                }
            }
        });
    }

    private async Task AddCommand(int keybinding, string text)
    {
        await _editor.AddCommand(keybinding, async (args) =>
        {
            await InsertTextAsync(text);
        });
    }

    private async Task SetPosition()
    {
        _selection = await _editor.GetSelection();
    }

    public BlazorMonaco.Selection? GetLastPosition()
    {
        return _selection;
    }

    public async Task<string> GetCodeAsync()
    {
        return await _editor.GetValue();
    }

    public async Task SetCodeAsync(string code)
    {
        await _editor.SetValue(code);
    }

    public async Task InsertTextAsync(string text)
    {
        var selection = await _editor.GetSelection();
        var operation = new IdentifiedSingleEditOperation()
            {
                Range = selection,
                ForceMoveMarkers = true,
                Text = text,
            };

        await _editor.ExecuteEdits("emojiEditor", new List<IdentifiedSingleEditOperation>() { operation }, new List<BlazorMonaco.Selection>() { selection });

        await ChangePosition(text.Length, selection);
    }

    private async Task ChangePosition(int length, Selection? selection = default)
    {
        BlazorMonaco.Position position;

        if(selection != null)
        {
            position = new BlazorMonaco.Position();
            position.Column = selection.PositionColumn + length;
            position.LineNumber = selection.PositionLineNumber;
        }
        else
        {
            position = await _editor.GetPosition();
            position.Column += length;
        }

        await _editor.SetPosition(position, "emojiEditor");

        await _editor.Focus();
    }
}
